<?xml version="1.0" encoding="UTF-8"?><ServiceProvider>
  <ApplicationName>demo_prompt</ApplicationName>
  <Description/>
  <InboundAuthenticationConfig>
    <InboundAuthenticationRequestConfigs>
      <InboundAuthenticationRequestConfig>
        <InboundAuthKey>demo_pass_params</InboundAuthKey>
        <InboundAuthType>openid</InboundAuthType>
        <InboundConfigType>standardAPPC</InboundConfigType>
        <Properties/>
      </InboundAuthenticationRequestConfig>
      <InboundAuthenticationRequestConfig>
        <InboundAuthKey>travelocity.com</InboundAuthKey>
        <InboundAuthType>samlsso</InboundAuthType>
        <InboundConfigType>standardAPP</InboundConfigType>
        <inboundConfiguration><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<samlssoServiceProviderDTO>
    <issuer>travelocity.com</issuer>
    <assertionConsumerUrls>
        <assertionConsumerUrl>http://localhost:8080/travelocity.com/home.jsp</assertionConsumerUrl>
    </assertionConsumerUrls>
    <defaultAssertionConsumerUrl>http://localhost:8080/travelocity.com/home.jsp</defaultAssertionConsumerUrl>
    <certAlias>wso2carbon</certAlias>
    <loginPageURL></loginPageURL>
    <attributeConsumingServiceIndex></attributeConsumingServiceIndex>
    <doSingleLogout>true</doSingleLogout>
    <doSignAssertions>true</doSignAssertions>
    <doSignResponse>true</doSignResponse>
    <requestedClaims/>
    <requestedAudiences/>
    <requestedRecipients/>
    <enableAttributeProfile>false</enableAttributeProfile>
    <isAssertionQueryRequestProfileEnabled>false</isAssertionQueryRequestProfileEnabled>
    <enableAttributesByDefault>false</enableAttributesByDefault>
    <nameIDFormat>urn/oasis/names/tc/SAML/1.1/nameid-format/emailAddress</nameIDFormat>
    <idPInitSSOEnabled>false</idPInitSSOEnabled>
    <idPInitSLOEnabled>false</idPInitSLOEnabled>
    <idpInitSLOReturnToURLs/>
    <doEnableEncryptedAssertion>false</doEnableEncryptedAssertion>
    <doValidateSignatureInRequests>true</doValidateSignatureInRequests>
    <signingAlgorithmURI>http://www.w3.org/2000/09/xmldsig#rsa-sha1</signingAlgorithmURI>
    <digestAlgorithmURI>http://www.w3.org/2000/09/xmldsig#sha1</digestAlgorithmURI>
    <assertionEncryptionAlgorithmURI>http://www.w3.org/2001/04/xmlenc#aes256-cbc</assertionEncryptionAlgorithmURI>
    <keyEncryptionAlgorithmURI>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</keyEncryptionAlgorithmURI>
</samlssoServiceProviderDTO>
]]></inboundConfiguration>
        <Properties/>
      </InboundAuthenticationRequestConfig>
      <InboundAuthenticationRequestConfig>
        <InboundAuthKey>demo_pass_params</InboundAuthKey>
        <InboundAuthType>passivests</InboundAuthType>
        <InboundConfigType>standardAPP</InboundConfigType>
        <Properties/>
      </InboundAuthenticationRequestConfig>
    </InboundAuthenticationRequestConfigs>
  </InboundAuthenticationConfig>
  <LocalAndOutBoundAuthenticationConfig>
    <AuthenticationSteps>
      <AuthenticationStep>
        <StepOrder>1</StepOrder>
        <LocalAuthenticatorConfigs>
          <LocalAuthenticatorConfig>
            <Name>BasicAuthenticator</Name>
            <DisplayName>basic</DisplayName>
            <IsEnabled>false</IsEnabled>
            <Properties/>
          </LocalAuthenticatorConfig>
        </LocalAuthenticatorConfigs>
        <FederatedIdentityProviders/>
        <SubjectStep>true</SubjectStep>
        <AttributeStep>true</AttributeStep>
      </AuthenticationStep>
    </AuthenticationSteps>
    <AuthenticationType>flow</AuthenticationType>
    <alwaysSendBackAuthenticatedListOfIdPs>false</alwaysSendBackAuthenticatedListOfIdPs>
    <UseTenantDomainInUsername>false</UseTenantDomainInUsername>
    <UseUserstoreDomainInUsername>false</UseUserstoreDomainInUsername>
    <EnableAuthorization>false</EnableAuthorization>
    <AuthenticationScript enabled="true" language="application/javascript"><![CDATA[function onInitialRequest(context) {
  executeStep(1, {
	onSuccess: function (context) {
	  var subject = context.steps[1].subject;
	  var username = subject.username;
	  var mobile = subject.localClaims['http://wso2.org/claims/mobile'];
	  if (!mobile) {
		promptMobileNumber(context);
	  }
	}
  }
			 );
}
function promptMobileNumber(context) {
  var username = context.steps[1].subject.username;
  var inputs = [];
  inputs.push({
	"id":"mobile","label":"Mobile Number"}
			 );
  prompt("genericForm", {
	"username":username, "inputs":inputs}, {
	onSuccess : function(context) {
	  var mobile = context.request.params.mobile[0];
	  var username = context.steps[1].subject.username;
	  var pattern = new RegExp("[0-9]{10}");
	  if (pattern.test(mobile)) {
		var subject = context.steps[1].subject;
		subject.localClaims['http://wso2.org/claims/mobile'] = mobile;
	  }
	  else {
		promptMobileNumber(context);
	  }
	}
  });
}
]]></AuthenticationScript>
  </LocalAndOutBoundAuthenticationConfig>
  <RequestPathAuthenticatorConfigs/>
  <InboundProvisioningConfig>
    <ProvisioningUserStore/>
    <IsProvisioningEnabled>false</IsProvisioningEnabled>
    <IsDumbModeEnabled>false</IsDumbModeEnabled>
  </InboundProvisioningConfig>
  <OutboundProvisioningConfig>
    <ProvisioningIdentityProviders/>
  </OutboundProvisioningConfig>
  <ClaimConfig>
    <RoleClaimURI/>
    <LocalClaimDialect>true</LocalClaimDialect>
    <IdpClaim/>
    <ClaimMappings/>
    <AlwaysSendMappedLocalSubjectId>false</AlwaysSendMappedLocalSubjectId>
    <SPClaimDialects/>
  </ClaimConfig>
  <PermissionAndRoleConfig>
    <Permissions/>
    <RoleMappings/>
    <IdpRoles/>
  </PermissionAndRoleConfig>
  <IsSaaSApp>false</IsSaaSApp>
</ServiceProvider>
